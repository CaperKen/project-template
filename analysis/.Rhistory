g1 <- grid.arrange(p2, p3, ncol=2)
g1 <- arrangeGrob(p2, p3, main="testing grid.arrange()")
getwd()
ggsave("./Desktop/test.pdf", g1)
n <- 200
x1 <- rnorm(n)
x2 <- rnorm(n)
beta1 <- 1
beta2 <- -.5
beta3 <- 2
mu <- beta1 * x1 + beta2 * x2 + beta3*x1*x2
sd.err <- .5
error <- rnorm(n, 0, sd.err)
y <- mu + error
mod <- lm(y~x1*x2)
summary(mod)
# parameter estimates
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
beta2 <- mod$coefficients[3]
beta3 <- mod$coefficients[4]
# reader's guess: range of possible covariate values
x1 <- seq(-5, 5, .1)
x2 <- seq(-5, 5, .1)
# reader's guess: what covariate combinations may have been observed
X <- expand.grid(x1=x1, x2=x2)
# reader's attempt to know how the covariates relate to E(y)
mu <- with(X, beta0 + beta1*x1 + beta2*x2 + beta3*x1*x2)
d <- data.frame(mu=mu, x1=X$x1, x2=X$x2)
require(ggplot2)
p1 <- ggplot(d, aes(x1, x2, z=mu)) + theme_bw() +
geom_tile(aes(fill=mu)) +
stat_contour() +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2")
p1
# Two different scenarios with different implications:
x1 <- rnorm(n, 2.5, .5)
x2 <- rnorm(n, 2.5, .7)
# confirm that this can give you the right parameter estimates
mu2 <- beta1*x1 + beta2*x2 + beta3*x1*x2
y2 <- mu2 + rnorm(n, 0, sd.err)
m2 <- lm(y2 ~ x1*x2)
summary(m2)
dx1 <- data.frame(x1=x1, x2=x2)
p2 <- ggplot(d) + theme_bw() +
geom_tile(aes(x1, x2, fill=mu)) +
stat_contour(aes(x1, x2, z=mu)) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2") +
geom_point(data=dx1, aes(x=x1, y=x2), shape=1)
p2
## Readers analysis
# parameter estimates
beta0 <- m2$coefficients[1]
beta1 <- m2$coefficients[2]
beta2 <- m2$coefficients[3]
beta3 <- m2$coefficients[4]
# reader's guess: range of possible covariate values
x1 <- seq(-5, 5, .1)
x2 <- seq(-5, 5, .1)
# reader's guess: what covariate combinations may have been observed
X <- expand.grid(x1=x1, x2=x2)
# reader's attempt to know how the covariates relate to E(y)
mu2 <- with(X, beta0 + beta1*x1 + beta2*x2 + beta3*x1*x2)
d2 <- data.frame(mu=mu2, x1=X$x1, x2=X$x2)
require(ggplot2)
ggplot(d2, aes(x1, x2, z=mu)) + theme_bw() +
geom_tile(aes(fill=mu)) +
stat_contour(binwidth=1.5) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2")
# checks out
# alternative case
x1 <- rnorm(n, 0, 1.5)
x2 <- rnorm(n, 0, 1.5)
dx2 <- data.frame(x1=x1, x2=x2)
p3 <- ggplot(d) + theme_bw() +
geom_tile(aes(x1, x2, fill=mu)) +
stat_contour(aes(x1, x2, z=mu)) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2") +
geom_point(data=dx2, aes(x=x1, y=x2), shape=1)
p3
require(gridExtra)
grid.arrange(p2, p3, ncol=2)
g1 <- arrangeGrob(p2, p3, main="Contour plot of the linear predictor")
ggsave("./Desktop/test.pdf", g1)
?ggsave
?arrangeGrob
g1 <- arrangeGrob(p2, p3, nrow=1, main="Contour plot of the linear predictor")
ggsave("./Desktop/test.pdf", g1)
g1 <- arrangeGrob(p2, p3, nrow=1,
main= textGrob("Contour plot of the linear predictor",
gp=gpar(fontsize=24)) )
ggsave("./Desktop/test.pdf", g1)
n <- 200
x1 <- rnorm(n)
x2 <- rnorm(n)
beta1 <- 1
beta2 <- -.5
beta3 <- 2
mu <- beta1 * x1 + beta2 * x2 + beta3*x1*x2
sd.err <- .5
error <- rnorm(n, 0, sd.err)
y <- mu + error
mod <- lm(y~x1*x2)
summary(mod)
# parameter estimates
beta0 <- mod$coefficients[1]
beta1 <- mod$coefficients[2]
beta2 <- mod$coefficients[3]
beta3 <- mod$coefficients[4]
# reader's guess: range of possible covariate values
x1 <- seq(-5, 5, .1)
x2 <- seq(-5, 5, .1)
# reader's guess: what covariate combinations may have been observed
X <- expand.grid(x1=x1, x2=x2)
# reader's attempt to know how the covariates relate to E(y)
mu <- with(X, beta0 + beta1*x1 + beta2*x2 + beta3*x1*x2)
d <- data.frame(mu=mu, x1=X$x1, x2=X$x2)
require(ggplot2)
p1 <- ggplot(d, aes(x1, x2, z=mu)) + theme_bw() +
geom_tile(aes(fill=mu)) +
stat_contour() +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2")
p1
# Two different scenarios with different implications:
x1 <- rnorm(n, 2.5, .5)
x2 <- rnorm(n, 2.5, .7)
# confirm that this can give you the right parameter estimates
mu2 <- beta1*x1 + beta2*x2 + beta3*x1*x2
y2 <- mu2 + rnorm(n, 0, sd.err)
m2 <- lm(y2 ~ x1*x2)
summary(m2)
dx1 <- data.frame(x1=x1, x2=x2)
p2 <- ggplot(d) + theme_bw() +
geom_tile(aes(x1, x2, fill=mu)) +
stat_contour(aes(x1, x2, z=mu)) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2") +
geom_point(data=dx1, aes(x=x1, y=x2), shape=1)+
opts(plot.margin = unit(c(1,1,1,1), "cm"))
p2
## Readers analysis
# parameter estimates
beta0 <- m2$coefficients[1]
beta1 <- m2$coefficients[2]
beta2 <- m2$coefficients[3]
beta3 <- m2$coefficients[4]
# reader's guess: range of possible covariate values
x1 <- seq(-5, 5, .1)
x2 <- seq(-5, 5, .1)
# reader's guess: what covariate combinations may have been observed
X <- expand.grid(x1=x1, x2=x2)
# reader's attempt to know how the covariates relate to E(y)
mu2 <- with(X, beta0 + beta1*x1 + beta2*x2 + beta3*x1*x2)
d2 <- data.frame(mu=mu2, x1=X$x1, x2=X$x2)
require(ggplot2)
ggplot(d2, aes(x1, x2, z=mu)) + theme_bw() +
geom_tile(aes(fill=mu)) +
stat_contour(binwidth=1.5) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2")
# checks out
# alternative case
x1 <- rnorm(n, 0, 1.5)
x2 <- rnorm(n, 0, 1.5)
dx2 <- data.frame(x1=x1, x2=x2)
p3 <- ggplot(d) + theme_bw() +
geom_tile(aes(x1, x2, fill=mu)) +
stat_contour(aes(x1, x2, z=mu)) +
scale_fill_gradient2(low="blue", mid="white", high="orange") +
xlab("Covariate 1") + ylab("Covariate 2") +
geom_point(data=dx2, aes(x=x1, y=x2), shape=1) +
opts(plot.margin = unit(c(1,1,1,1), "cm"))
p3
require(gridExtra)
g1 <- arrangeGrob(p2, p3, nrow=1,
main= textGrob("Contour plot of the linear predictor",
gp=gpar(fontsize=24)) )
ggsave("./Desktop/test.pdf", g1)
g1 <- arrangeGrob(p2, p3, nrow=1,
main= textGrob("Contour plot of the linear predictor",
vjust=1, gp=gpar(fontsize=24)) )
ggsave("./Desktop/test.pdf", g1)
ggsave("test.pdf", g1)
ggsave("test.pdf", g1)
?ggsave
ggsave("test.pdf", g1, width=8, height=4)
ggsave("test.pdf", g1, width=6, height=3)
ggsave("test.pdf", g1, width=10, height=4)
?unit
require(grid)
data(iris)
str(iris)
data(iris)
str(iris)
write.table(iris, file="iris.csv", sep=",", row.names=F)
getwd()
cd
setwd("~/Desktop/mkdown_template/analysis")
iris <- read.csv("iris.csv")
str(iris)
str(iris)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point() + theme_bw()
require(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point() + theme_bw()
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_bw()
mod <- lm(Sepal.Width ~ Sepal.Length*Species, data=iris)
summary(mod)
mod2 <- lm(Sepal.Width ~ Sepal.Length + Species, data=iris)
anova(mod1, mod2)
mod1 <- lm(Sepal.Width ~ Sepal.Length*Species, data=iris)
mod2 <- lm(Sepal.Width ~ Sepal.Length + Species, data=iris)
anova(mod1, mod2)
AIC(mod1, mod2)
plot(mod1)
fig1 <- function(){
par(mfrow=c(2,2))
plot(mod1)
}
fig1 <- function(){
par(mfrow=c(2,2))
plot(mod1)
par(mfrow=c(1,1))
}
fig1()
?stat_lm
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_bw() +
stat_smooth(method="lm", formula=Sepal.Length ~ Sepal.Width*Species)
?ns
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_bw() +
stat_smooth(method="lm", aes(fill=Species))
?ggsave
ggsave("figure1.svg", fig1, width=6, height=5)
fig1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_bw() +
stat_smooth(method="lm", aes(fill=Species))
ggsave("figure1.svg", fig1, width=6, height=5)
fig1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_classic() +
stat_smooth(method="lm", aes(fill=Species))
ggsave("figure1.svg", fig1, width=6, height=5)
ggsave("figure1.svg", fig1, width=6, height=4)
fig1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_classic() +
stat_smooth(method="lm", aes(fill=Species), se=F)
ggsave("figure1.svg", fig1, width=6, height=4)
fig2 <- function(){
par(mfrow=c(2,2))
plot(mod1)
par(mfrow=c(1,1))
}
fig2()
fig2 <- function(){
par(mfrow=c(2,2))
svg("figure2.svg")
plot(mod1)
dev.off()
par(mfrow=c(1,1))
}
?svg
fig2 <- function(){
par(mfrow=c(2,2))
svg("figure2.svg", width=6, height=4)
plot(mod1)
dev.off()
par(mfrow=c(1,1))
}
fig2()
fig2 <- function(){
svg("figure2.svg", width=6, height=4)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
par(mfrow=c(1,1))
}
fig2()
fig2 <- function(){
svg("figure2.svg", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
par(mfrow=c(1,1))
}
fig2()
# Show the default plots for lm
fig2 <- function(){
svg("figure2.svg", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
par(mfrow=c(1,1))
}
fig2()
iris <- read.csv("iris.csv") # load data
str(iris) # view structure
# suppose we want to know whether the relationship between
# sepal length and width differs among species
mod1 <- lm(Sepal.Width ~ Sepal.Length*Species, data=iris)
mod2 <- lm(Sepal.Width ~ Sepal.Length + Species, data=iris)
anova(mod1, mod2) # interaction term is significantly different from 0
# Show the interaction effect
require(ggplot2)
fig1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_classic() +
stat_smooth(method="lm", aes(fill=Species), se=F)
ggsave("figure1.svg", fig1, width=6, height=4)
# Show the default plots for lm
svg("figure2.svg", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
?pdf
?png
ggsave("figure1.png", fig1, width=6, height=4)
png("figure2.png", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=12, height=10)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=20, height=15)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
par(mfrow=c(2,2))
plot(mod1)
png("figure2.png", width=800, height=600)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
?ggsave
?png
png("figure2.png", width=800, height=600, res=300)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=2000, height=1800, res=600)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=20000, height=18000, res=600)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
dev.off()
png("figure2.png", width=800, height=600, res=300)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=1600, height=1200, res=300)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=2000, height=1600, res=300)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
png("figure2.png", width=2400, height=2000, res=300)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
?jpg
?jpeg
setwd("./analysis/")
iris <- read.csv("iris.csv") # load data
str(iris) # view structure
# suppose we want to know whether the relationship between
# sepal length and width differs among species
mod1 <- lm(Sepal.Width ~ Sepal.Length*Species, data=iris)
mod2 <- lm(Sepal.Width ~ Sepal.Length + Species, data=iris)
anova(mod1, mod2) # interaction term is significantly different from 0
# Show the interaction effect
require(ggplot2)
fig1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=1) + theme_classic() +
stat_smooth(method="lm", aes(fill=Species), se=F)
ggsave("figure1.pdf", fig1, width=5, height=3)
# Show the default plots for lm
pdf("figure2.pdf", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
pdf("figure2.pdf", width=10, height=8)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
pdf("figure2.pdf", width=8, height=6)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
pdf("figure2.pdf", width=4, height=5)
par(mfrow=c(2,2))
plot(mod1)
dev.off()
library(pander)                         # load pkg
set.caption('Regression results')            # add caption
pander(head(iris))
summary(mod1)
pander(summary(mod1))
pander(mod1)
summary(mod1)
pander(mod1)
?pander
pandoc.table(m, style = "grid")
pandoc.table(mtcars)
## caption
pandoc.table(mtcars, 'Motor Trend Car Road Tests')
## other input/output formats
pandoc.table(mtcars[, 1:3], decimal.mark = ',')
pandoc.table(mtcars[, 1:3], decimal.mark = ',', justify = 'right')
pandoc.table(matrix(sample(1:1000, 25), 5, 5))
pandoc.table(matrix(runif(25), 5, 5))
pandoc.table(matrix(runif(25), 5, 5), digits = 5)
pandoc.table(matrix(runif(25),5,5), round = 1)
pandoc.table(table(mtcars$am))
pandoc.table(table(mtcars$am, mtcars$gear))
pandoc.table(table(state.division, state.region))
pandoc.table(table(state.division, state.region), justify = 'centre')
m <- data.frame(a = c(1, -500, 10320, 23, 77),
b = runif(5),
c = c('a', 'bb', 'ccc', 'dddd', 'eeeee'))
pandoc.table(m)
pandoc.table(m, justify = c('right', 'left', 'centre'))
## splitting up too wide tables
pandoc.table(mtcars)
pandoc.table(mtcars, caption = 'Only once after the first part!')
## tables with line breaks in cells
## NOTE: line breaks are removed from table content
## and added automatically based on "split.cells" parameter!
t <- data.frame(a = c('hundreds\nof\nmouses', '3 cats'), b=c('FOO is nice', 'BAR\nBAR2'))
pandoc.table(t)
pandoc.table(t, split.cells = 5)
## exporting tables in other Pandoc styles
pandoc.table(m)
pandoc.table(m, style = "grid")
pandoc.table(m, style = "simple")
pandoc.table(t, style = "grid")
pandoc.table(t, style = "grid", split.cells = 5)
pandoc.table(t, style = "simple")
tryCatch(pandoc.table(t, style = "simple", split.cells = 5),
error = function(e) 'Yeah, no newline support in simple tables')
pandoc.table(t, style = "rmarkdown")
## highlight cells
t <- mtcars[1:3, 1:5]
pandoc.table(t$mpg, emphasize.cells = 1)
pandoc.table(t$mpg, emphasize.strong.cells = 1)
pandoc.table(t$mpg, emphasize.cells = 1, emphasize.strong.cells = 1)
pandoc.table(t$mpg, emphasize.cells = 1:2)
pandoc.table(t$mpg, emphasize.strong.cells = 1:2)
pandoc.table(t, emphasize.cells = which(t > 20, arr.ind = TRUE))
pandoc.table(t, emphasize.cells = which(t == 6, arr.ind = TRUE))
## with helpers
emphasize.cols(1)
emphasize.rows(1)
pandoc.table(t)
emphasize.strong.cells(which(t > 20, arr.ind = TRUE))
pandoc.table(t)
pandoc.table(t)
pandoc.table(t)
panderOptions('table.split.table', Inf) # not to split table
set.caption('Regression results')            # add caption
pander(summary(mod1))
pander(mod1)
?cat
getwd
getwd()
cat(pander(mod1), file="table.md")
mod.tab <- pander(mod1)
mod.tab
str(pander(mod1))
sink(file="table.md")
pander(mod1)
sink()
print("# Tables")
"# tables"
print(# Tables)
)
cat("# Table")
pander(mod1)
library(pander)                         # load pkg
pander(mod1)
?panderOptions
panderOptions(table.style="multiline") # not to split table
library(pander)                         # load pkg
panderOptions(table.style="grid") # not to split table
pander(mod1)
pandoc.table(mod1)
pandocOptions("multiline")
panderOptions("multiline")
panderOptions(table.style='multiline')
panderOptions('table.style')
panderOptions('table.style') <- 'grid'
panderOptions('table.style', grid)
pander(mod1)
library(pander)                         # load pkg
panderOptions('table.style', grid)
cat("# Tables")
pander(mod1)
panderOptions('table.style', simple)
panderOptions('table.style', 'grid')
pander(mod1)
